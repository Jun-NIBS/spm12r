{
    "contents" : "#' @title SPM BWLabel Clusters of Certain Size\n#'\n#' @description Get Cluster of certain size from spm_bwlabel\n#' @param infile input filename\n#' @param outfile output filename\n#' @param retimg Return the image instead of matlab output\n#' @param k Minimum cluster size needed\n#' @param topN Top number of clusters kept (used if k is \\code{NULL})\n#' @param margin Margin to loop over if wanted in 2D\n#' @param binary (logical) Should the result be binary or numbered with cluster.\n#' @param spmdir SPM directory (for MATLAB)\n#' @param reorient If \\code{retimg}, then this argument is passed to \n#' \\code{readNIfTI}\n#' @param verbose Print Diagnostics\n#' @return Output from \\code{run_matlab_script} or \\code{nifti} object,\n#' depending on \\code{retimg}\n#' @import R.utils\n#' @export\n#' @note Taken from \n#' http://en.wikibooks.org/wiki/SPM/How-to#How_to_remove_clusters_under_a_certain_size_in_a_binary_mask.3F\n#' @return Result from \\code{\\link{run_matlab_script}}\nspm_bwlabel = function(infile, # input filename\n                       outfile = NULL, # output filename\n                       retimg = TRUE,\n                       k = NULL,\n                       topN = NULL,\n                       margin = NULL,\n                       binary = TRUE,\n                       spmdir = spm_dir(),\n                       reorient = FALSE,\n                       verbose = TRUE\n){\n  infile = checkimg(infile, gzipped=FALSE)\n  infile = path.expand(infile)\n  ##################\n  # Checking on outfiles or return images\n  ##################  \n  if (retimg){\n    if (is.null(outfile)) {\n      outfile = tempfile(fileext = \".nii\")\n    } \n  } else {\n    stopifnot(!is.null(outfile))\n  }  \n  \n  outfile = path.expand(outfile)\n  \n  if (grepl(\"\\\\.gz$\", infile)){\n    infile = gunzip(infile, remove=FALSE, temporary=TRUE,\n                    overwrite=TRUE)\n  } else { \n    infile = paste0(nii.stub(infile), \".nii\")\n  }\n  stopifnot(file.exists(infile))\n  gzip.outfile = FALSE\n  if (grepl(\"\\\\.gz$\", outfile)){\n    gzip.outfile = TRUE\n    outfile = nii.stub(outfile)\n    outfile = paste0(outfile, \".nii\")\n  }\n  meas.use = NULL\n  if (!is.null(k) & !is.null(topN)){\n    stop(\"Need only K or topN\")\n  }  \n  if (is.null(k) & is.null(topN)){\n    cat(\"Using k with no defaults, using 1\")\n    #     pdim = sapply(1:3, function(x) {\n    #       as.numeric(fslval(file=infile, keyword = paste0(\"pixdim\", x)))\n    #     })\n    #     ## 500 mL / (mm^3/voxel) * 1000 mm^3/cm^3 / 2 (2-sided lung)\n    #     k = 500 / prod(pdim) * 1000 / 2\n    k = 1\n  }\n  \n  if (is.null(k)) {\n    meas.use = \"topN\"\n    topN = ceiling(topN)\n    if (verbose) {\n      cat(\"# topN = \", topN, \"\\n\")\n    }\n  } else {\n    meas.use = \"k\"\n    k = round(k)  \n    if (verbose){\n      cat(\"# K = \", k, \"\\n\")\n    }\n  }\n  \n  \n  \n  \n  cmd = \"\"\n  if (!is.null(spmdir)){\n    spmdir = path.expand(spmdir)\n    cmd <- paste(cmd, sprintf(\"addpath('%s');\", spmdir))\n    cmd <- paste(cmd, sprintf(\"addpath('%s/toolbox');\", spmdir))\n  }\n  \n  if (!is.null(margin)){\n    stopifnot(margin <= 3)\n    if (meas.use != \"topN\"){\n      stop(\"Margin can only be used with topN\")\n    }\n    loopstr = rep(\":\", 3)\n    loopstr[margin] = \"idim\"\n    loopstr = paste(loopstr, collapse = \", \")\n    loopstr = paste0(\"dat(\", loopstr, \")\")\n    addcmds = c(\n      paste0('for idim = 1:size(dat, ', margin, \")\"),\n      paste0(\"x = \", loopstr, \";\"),\n      paste0(\"if sum(x(:)) > 0\"),\n      paste0(\"[l2, num] = spm_bwlabel(double(\", loopstr, \" > 0), 26);\"),\n      \"if ~num, warning('No clusters found.'); end\",\n      '%-Extent threshold, and sort clusters according to their extent',\n      \"[n, ni] = sort(histc(l2(:),0:num), 1, 'descend');\",\n      'l  = zeros(size(l2));',\n      'printnum = min(num, 5);',\n      'disp(ni(1:printnum));',\n      'disp(n(1:printnum));',\n      'n  = n(ni ~=  1); ni = ni(ni ~= 1)-1;',\n      ifelse(meas.use == \"k\", \n             'ni = ni(n>=k); n  = n(n>=k);',\n             sprintf('ni = ni(1:%d); n  = n(1:%d);', topN, topN)),\n      'for i=1:length(n), l(l2==ni(i)) = i; end',\n      paste0(loopstr, \"= \", ifelse(binary, \"l~= 0;\", \"l;\")),\n      'clear l2 ni;',\n      \"fprintf('Selected %d clusters (out of %d) in image.',length(n),num);\", \n      \n      \"end\",\n      \"end\"\n    )\n  } else {\n    addcmds = c(\n      '[l2, num] = spm_bwlabel(double(dat>0),26);',\n      \"if ~num, warning('No clusters found.'); end\",\n      '%-Extent threshold, and sort clusters according to their extent',\n      \"[n, ni] = sort(histc(l2(:),0:num), 1, 'descend');\",\n      'l  = zeros(size(l2));',\n      'printnum = min(num, 5);',\n      'disp(ni(1:printnum));',\n      'disp(n(1:printnum));',\n      'n  = n(ni ~=  1); ni = ni(ni ~= 1)-1;',\n      ifelse(meas.use == \"k\", \n             'ni = ni(n>=k); n  = n(n>=k);',\n             sprintf('ni = ni(1:%d); n  = n(1:%d);', topN, topN)),\n      'for i=1:length(n), l(l2==ni(i)) = i; end',\n      'clear l2 ni;',\n      \"fprintf('Selected %d clusters (out of %d) in image.',length(n),num);\",\n      ifelse(binary, \"dat = l~=0;\", \"dat = l;\")\n    )\n  }\n  \n  cmds = c(cmd, \n           sprintf(\"ROI = '%s'\", infile), \n           sprintf('k = %d', k),\n           sprintf(\"ROIf  = '%s'\", outfile), \n           '%-Connected Component labelling',\n           'V = spm_vol(ROI);',\n           'dat = spm_read_vols(V);',\n           addcmds,\n           '%-Write new image',\n           'V.fname = ROIf;',\n           'V.private.cal = [0 1];',\n           'spm_write_vol(V,dat);')\n  \n  #   sname = file.path(tempdir(), \"my_lung_script.m\")\n  sname = paste0(tempfile(), \".m\")\n  writeLines(cmds, con=sname)\n  if (verbose){\n    cat(paste0(\"# Script is located at \", sname, \"\\n\"))\n  }\n  res = run_matlab_script(sname)\n  \n  \n  if (gzip.outfile){\n    gzip(outfile, overwrite=TRUE, remove=TRUE)\n    outfile = paste0(nii.stub(outfile), \".nii.gz\")\n  }\n  if (retimg){\n    if (verbose){\n      cat(paste0(\"# Reading output file \", outfile, \"\\n\"))\n    }    \n    res = readNIfTI(outfile, reorient=reorient)\n  }\n  cat('\\n')\n  return(res)\n}\n",
    "created" : 1441165333138.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "347892410",
    "id" : "D96ECAC6",
    "lastKnownWriteTime" : 1441165341,
    "path" : "~/Dropbox/Packages/spm12r/R/spm_bwlabel.R",
    "project_path" : "R/spm_bwlabel.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}