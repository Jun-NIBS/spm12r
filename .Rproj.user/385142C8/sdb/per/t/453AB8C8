{
    "contents" : "#' @title SPM12 Realign (Estimate and Reslice)\n#'\n#' @description Performs SPM12 realignment estimation and reslicing on an Image\n#' @param filename Files to be realigned and resliced\n#' @param fwhm Full-Width Half Max to smooth \n#' @param register_to Should the files be registered to the first or the mean\n#' @param reslice Options for reslicing all - all images in filename,\n#' 2:n - all images in filename 2:length(filename),\n#' all+mean - all images and the mean, mean - mean only\n#' @param prefix Prefix to append to front of image filename \n#' @param add_spm_dir Add SPM12 directory from this package\n#' @param spmdir SPM dir to add, will use package default directory \n#' @param clean Remove scripts from temporary directory after running\n#' @param verbose Print diagnostic messages\n#' @param outdir Directory to copy results.  If full filename given, then results will\n#' be in \\code{dirname(filename)}\n#' @param ... Arguments passed to \\code{\\link{run_spm12_script}}\n#' @export\n#' @import fslr\n#' @import matlabr\n#' @return Result from run_matlab_script \nspm12_realign <- function(filename, \n                          fwhm = 5,                              \n                          register_to = c(\"first\", \"mean\"),\n                          reslice = c(\"all\",\"2:n\", \"all+mean\", \"mean\"),\n                          prefix = \"r\",\n                          add_spm_dir = TRUE,\n                          spmdir = spm_dir(),                          \n                          clean = TRUE,\n                          verbose = TRUE,\n                          outdir = NULL,                       \n                          ...\n){\n  \n  ########################\n  # Getting Number of Time points\n  ########################  \n  if (verbose){\n    cat(\"# Getting Number of Time Points\\n\")\n  }\n  time_points = ntime_points(filename)\n  \n  reslice = match.arg(reslice, c(\"all\",\"2:n\", \"all+mean\", \"mean\"))\n  \n  # check filenames\n  filename = filename_check(filename)\n  ###################\n  # If reslice is just mean, then the file is simply returned\n  ###################  \n  if (verbose){\n    cat(paste0(\"# Reslice is \", reslice, \"\\n\"))\n  }\n  if ( (reslice %in% \"mean\") ){\n    outfile = filename\n  } else {\n    outfile = file.path(dirname(filename),\n                        paste0(prefix, basename(filename)))    \n  }\n  \n  reslice = switch(reslice,\n                   \"all\" = \"[2 0]\", \n                   \"2:n\" = \"[1 0]\", \n                   \"all+mean\" = \"[2 1]\", \n                   \"mean\" = \"[0 1]\")\n  \n  stub = nii.stub(filename, bn=TRUE)[1]\n  rpfile = file.path(dirname(filename),\n                     paste0(\"rp_\", stub, \".txt\"))\n  meanfile = file.path(dirname(filename),\n                       paste0(\"mean\", stub, \".nii\"))\n  matfile = file.path(dirname(filename),\n                      paste0(stub, \".mat\"))\n  \n  ##########################################################\n  # Pasting together for a 4D file\n  ##########################################################\n  filename = paste0(filename, \",\", time_points)\n  filename = rvec_to_matlabcell(filename)\n  \n  register_to = match.arg(register_to, c(\"first\", \"mean\"))\n  register_to = switch(register_to,\n                       first = 0, \n                       mean = 1)\n\n  jobvec = c(filename, prefix, fwhm, reslice,\n             register_to, spmdir)\n  names(jobvec) = c(\"%filename%\", \"%prefix%\", \"%fwhm%\", \"%reslice%\",\n                    \"%registerto%\", \"%spmdir%\")  \n  \n  res = run_spm12_script( script_name = \"Realign\",\n                          jobvec = jobvec,\n                          mvec = NULL,\n                          add_spm_dir = add_spm_dir,\n                          spmdir = spmdir,\n                          clean = clean, \n                          verbose = verbose, \n                          ...)\n  stopifnot(res == 0)\n  ####################\n  # Copy outfiles\n  ####################  \n  if (!is.null(outdir)){\n    file.copy(outfile, to = outdir, overwrite = TRUE)\n    file.copy(rpfile, to = outdir, overwrite = TRUE)\n    if (!is.null(meanfile)){\n      file.copy(meanfile, to = outdir, overwrite = TRUE)\n    }\n    file.copy(matfile, to = outdir, overwrite = TRUE)    \n  }\n  \n  l = list(outfiles = outfile, \n           rp = rpfile, \n           mean = meanfile, \n           mat = matfile)\n  return(l)\n}\n\n\n",
    "created" : 1430358134093.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "270373251",
    "id" : "453AB8C8",
    "lastKnownWriteTime" : 1430372028,
    "path" : "~/Dropbox/Packages/spm12r/R/spm12_realign.R",
    "project_path" : "R/spm12_realign.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "type" : "r_source"
}