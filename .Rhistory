job = gsub("%filename%", filenmae)
job = gsub("%filename%", filename, job)
job
m
library(spm12r)
scripts = spm12_script("Segment")
m = readLines(scripts['script'])
job = readLines(scripts['job'])
job = gsub("%filename%", filename, job)
job
m
library(spm12r)
library(matlabr)
filename = "~/Desktop/scratch/SUBJ0001-01-MPRAGE_N4_reorient.nii"
filename = path.expand("~/Desktop/scratch/SUBJ0001-01-MPRAGE_N4_reorient.nii")
options(matlab.path='/Applications/MATLAB_R2014b.app/bin')
filename = path.expand("~/Desktop/scratch/SUBJ0001-01-MPRAGE_N4_reorient.nii")
scripts = spm12_script("Segment")
m = readLines(scripts['script'])
#   options(matlab.path='/Applications/MATLAB_R2014b.app/bin')
# filename = path.expand("~/Desktop/scratch/SUBJ0001-01-MPRAGE_N4_reorient.nii")
#
#   infile = checkimg(infile, gzipped=FALSE)
#   infile = path.expand(infile)
#   if (grepl("\\.gz$", infile)){
#     infile = gunzip(infile, remove=FALSE, temporary=TRUE,
#                     overwrite=TRUE)
#   } else {
#     infile = paste0(nii.stub(infile), ".nii")
#   }
#
job = readLines(scripts['job'])
job = gsub("%filename%", filename, job)
m = gsub("%jobfile%", scripts['job'], m)
res = run_matlab_script(m)
res
run_matlab_script
m
scripts = spm12_script("Segment")
m = readLines(scripts['script'])
#   options(matlab.path='/Applications/MATLAB_R2014b.app/bin')
# filename = path.expand("~/Desktop/scratch/SUBJ0001-01-MPRAGE_N4_reorient.nii")
#
#   infile = checkimg(infile, gzipped=FALSE)
#   infile = path.expand(infile)
#   if (grepl("\\.gz$", infile)){
#     infile = gunzip(infile, remove=FALSE, temporary=TRUE,
#                     overwrite=TRUE)
#   } else {
#     infile = paste0(nii.stub(infile), ".nii")
#   }
#
job = readLines(scripts['job'])
job = gsub("%filename%", filename, job)
m = gsub("%jobfile%", scripts['job'], m)
writeLines(m, con=scripts['script'])
writeLines(job, con=scripts['job'])
res = run_matlab_script(scripts['script'])
res
1/1000  * 0.99/ (1/1000 * 0.99 + 999/1000 * 0.99)
1/1000  * 0.99/ (1/1000 * 0.99 + 999/1000 * (1-0.99)
)
dir(tdir)
dir(tempdir())
library(spm12r)
rm(list=ls())
scripts = spm12_script("Segment")
m = readLines(scripts['script'])
options(matlab.path='/Applications/MATLAB_R2014b.app/bin')
filename = path.expand("~/Desktop/scratch/SUBJ0001-01-MPRAGE_N4_reorient.nii")
scripts
job = readLines(scripts['job'])
job = gsub("%filename%", filename, job)
job
m = gsub("%jobfile%", scripts['job'], m)
m
writeLines(m, con=scripts['script'])
writeLines(job, con=scripts['job'])
res = run_matlab_script(scripts['script'])
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(devtools)
add_travis()
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
spmdir = spm_dir()
scripts = spm12_script("Segment")
m = readLines(scripts['script'])
library(spm12r)
spmdir = spm_dir()
scripts = spm12_script("Segment")
m = readLines(scripts['script'])
m
library(spm12r)
library(spm12r)
?checkimg
library(fslr)
?checkimg
checkimg
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
paste(NULL, "hey")
library(spm12r)
library(spm12r)
x = "hey"
names(x)  = '%blah%'
x
library(spm12r)
spm12_script
?spm12_script
library(spm12r)
?file.copy
library(spm12r)
library(spm12r)
library(matlabr)
rvec_to_matlab
rvec_to_matlabclist
rvec_to_matlab
library(spm12r)
library(fslr); other.files = lapply(1:3, function(x) readNIfTI("~/Desktop/scratch/c1SUBJ0001-01-MPRAGE.nii", reorient=FALSE))
other.files = filename_check(other.files)
other.files
cell = rvec_to_matlabcell(other.files, transpose = TRUE)
cell
jobvec = c(filename, other.files, spmdir)
names(jobvec) = c("%filename%", "%resample%", "%spmdir%")
spm12_script("Segment")
library(spm12r)
spm12_script("Segment")
library(spm12r)
rvec_to_matlab(1:10)
?rvec_to_matlab(1:10)
?rvec_to_matlab
rvec_to_matlab
library(matlabr)
?rvec_to_matlab
filename = "~/Desktop/scratch//100-318_20070723_0957_CT_3_CT_Head-_SS_0.01_SyN_ROI.nii.gz"
filename = filename_check(filename)
library(spm12r)
filename = filename_check(filename)
filename
library(fslr)
fslval(filename, keyword = "dim3")
slice_order = 1:20
slice_order = rvec_to_matlab(slice_order, row=TRUE)
nslices = 37
slice_order = 1:nslices
slice_order/2
nslices/2
nslices = 34
nslices/2
slice_order
median(slice_order)
median(seq(length(slice_order)))
slice_order[median(seq(length(slice_order)))]
[median(seq(nslices))
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(fslr)
?check_nifti
library(spm12r)
library(spm12r)
library(matlabr)
?filename_check
?checknii
?checkimg
?tempimg
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
?acpc_reorient
library(spm12r)
library(spm12r)
library(matlabr)
rvec_to_matlab(NULL)
rvec_to_matlabcell(NULL)
rvec_to_matlab("hey", "ho")
rvec_to_matlabcell(c("hey", "ho"))
library(spm12r)
library(spm12r)
library(spm12r)
library(fslr)
library(matlabr)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(cttools)
library(spm12r)
library(extrantsr)
?reg_whitestripe
library(WhiteStripe)
whitestripe
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
library(spm12r)
?unzip
?download.file
library(spm12r)
library(R.utils)
?unzip
?download.file
library(spm12r)
library(utils)
library(matlabr)
library(stringr)
library(oro.nifti)
library(fslr)
library(R.utils)
?gzip
?checknii
?gunzip
checknii
checknii.nifti
showMethods("checknii")
showMethods("checknii", signature="character")
findMethods("checknii", signature="character")
findMethods("checknii", classes="character")
library(spm12r)
install_spm12()
spm12_files = system.file("spm12", package= "spm12r")
spm12_files
!file.exists(spm12_files)
url = "http://muschellij2.github.io/spm12r/spm12.zip"
urlfile <- file.path(system.file(package="spm12r"), "spm12.zip")
utils::download.file(url, urlfile, quiet = TRUE)
file.exists(urlfile)
utils::unzip(urlfile, exdir = system.file(package="spm12r"))
library(spm12r)
library(git2r)
clone()
?clone()
?clone
library(spm12r)
clone("https://github.com/muschellij2/spm12r", branch = "gh-pages", local_path = system.file(package= "spm12r"))
clone("https://github.com/muschellij2/spm12r", branch = "gh-pages", local_path = file.path(system.file(package= "spm12r"), "spm12"))
file.path(system.file(package= "spm12r"), "spm12")
system("open ", file.path(system.file(package= "spm12r"), "spm12"))
system(paste0("open ", file.path(system.file(package= "spm12r"), "spm12")))
library(spm12r)
spm12_files = system.file("spm12", package= "spm12r")
!file.exists(spm12_files))
!file.exists(spm12_files)
git2r::clone(
"https://github.com/muschellij2/spm12r",
branch = "gh-pages",
local_path = file.path(system.file(package= "spm12r"), "spm12"),
progress = FALSE
)
spm12_files = system.file("spm12", package = "spm12r")
if (!all(file.exists(spm12_files))){
stop("SPM12 not installed in spm12r directory, stopping")
}
library(spm12r)
spm12_script(script_name = "Segment")
install_spm12()
m_scripts = system.file("scripts",
paste0(script_name, c(".m")),
package="spm12r")
miss = m_scripts %in% ""
script_name = "Segment"
outdir = tempdir()
m_scripts = system.file("scripts",
paste0(script_name, c(".m")),
package="spm12r")
####################
# Use General Executable
####################
miss = m_scripts %in% ""
if (any(miss)){
m_scripts[miss] = system.file("scripts", "Executable.m",
package="spm12r")
}
####################
# Get Jobfile
####################
job_scripts = system.file("scripts",
paste0(script_name, c("_job.m")),
package="spm12r")
m_scripts
job_scripts
scripts = c(job = job_scripts, script = m_scripts)
scripts = scripts[scripts != "", drop = FALSE]
nn = names(scripts)
nn
library(spm12r)
?system.file
library(spm12r)
s
install_spm12()
library(spm12r)
setwd("~/Desktop/")
infile = "test.nii"
install_spm12()
infile = checkimg(infile, gzipped=FALSE)
infile = path.expand(infile)
library(fslr)
infile = checkimg(infile, gzipped=FALSE)
infile = path.expand(infile)
infile
retimg = TRUE
outfile = NULL
reorient = FALSE
verbose = TRUE
if (retimg){
if (is.null(outfile)) {
outfile = tempfile(fileext = ".nii")
}
} else {
stopifnot(!is.null(outfile))
}
outfile = path.expand(outfile)
if (grepl("\\.gz$", infile)){
infile = R.utils::gunzip(infile, remove=FALSE, temporary=TRUE,
overwrite=TRUE)
} else {
infile = paste0(nii.stub(infile), ".nii")
}
stopifnot(file.exists(infile))
gzip.outfile = FALSE
if (grepl("\\.gz$", outfile)){
gzip.outfile = TRUE
outfile = nii.stub(outfile)
outfile = paste0(outfile, ".nii")
}
cmds = c(sprintf("ROI = '%s'", infile),
sprintf('k = %d;', k),
sprintf("ROIf  = '%s'", outfile),
'%-Connected Component labelling',
'V = spm_vol(ROI);',
'dat = spm_read_vols(V);',
'cc = bwconncomp(dat > 0, 26);',
'dat = labelmatrix(cc);',
'%-Write new image',
'V.fname = ROIf;',
'V.private.cal = [0 1];',
'spm_write_vol(V,dat);')
cmds = c(sprintf("ROI = '%s'", infile),
sprintf("ROIf  = '%s'", outfile),
'%-Connected Component labelling',
'V = spm_vol(ROI);',
'dat = spm_read_vols(V);',
'cc = bwconncomp(dat > 0, 26);',
'dat = labelmatrix(cc);',
'%-Write new image',
'V.fname = ROIf;',
'V.private.cal = [0 1];',
'spm_write_vol(V,dat);')
cmds
sname = paste0(tempfile(), ".m")
writeLines(cmds, con=sname)
if (verbose){
cat(paste0("# Script is located at ", sname, "\n"))
}
res = run_matlab_script(sname)
library(matlabr)
res = run_matlab_script(sname)
spm_dir()
spmdir = spm_dir()
install_spm12()
infile = checkimg(infile, gzipped=FALSE)
infile = path.expand(infile)
##################
# Checking on outfiles or return images
##################
if (retimg){
if (is.null(outfile)) {
outfile = tempfile(fileext = ".nii")
}
} else {
stopifnot(!is.null(outfile))
}
outfile = path.expand(outfile)
outfile
if (grepl("\\.gz$", infile)){
infile = R.utils::gunzip(infile, remove=FALSE, temporary=TRUE,
overwrite=TRUE)
} else {
infile = paste0(nii.stub(infile), ".nii")
}
stopifnot(file.exists(infile))
gzip.outfile = FALSE
if (grepl("\\.gz$", outfile)){
gzip.outfile = TRUE
outfile = nii.stub(outfile)
outfile = paste0(outfile, ".nii")
}
cmd = ""
if (!is.null(spmdir)){
spmdir = path.expand(spmdir)
cmd = paste(cmd, sprintf("addpath(genpath('%s'));", spmdir))
}
cmds = c(cmd,
sprintf("ROI = '%s'", infile),
sprintf("ROIf  = '%s'", outfile),
'%-Connected Component labelling',
'V = spm_vol(ROI);',
'dat = spm_read_vols(V);',
'cc = bwconncomp(dat > 0, 26);',
'dat = labelmatrix(cc);',
'%-Write new image',
'V.fname = ROIf;',
'V.private.cal = [0 1];',
'spm_write_vol(V,dat);')
sname = paste0(tempfile(), ".m")
writeLines(cmds, con=sname)
if (verbose){
cat(paste0("# Script is located at ", sname, "\n"))
}
res = run_matlab_script(sname)
res
if (gzip.outfile) {
R.utils::gzip(outfile, overwrite = TRUE, remove=TRUE)
outfile = paste0(nii.stub(outfile), ".nii.gz")
}
if (retimg){
if (verbose){
cat(paste0("# Reading output file ", outfile, "\n"))
}
res = readnii(outfile, reorient = reorient)
} else {
res = outfile
}
outfile
res
ortho2(res)
table(c(res))
library(spm12r)
set.seed(1234)
dims = c(30, 30, 10)
set.seed(1234)
dims = c(30, 30, 10)
arr = array(rnorm(prod(dims)), dim = dims)
nim = nifti(arr)
nim
library(fslr)
set.seed(1234)
dims = c(30, 30, 10)
arr = array(rnorm(prod(dims)), dim = dims)
nim = nifti(arr)
tempimg
library(fslr)
set.seed(1234)
dims = c(30, 30, 10)
arr = array(rnorm(prod(dims)), dim = dims)
nim = nifti(arr)
mask = nim > 1
ortho2(mask)
bwconncomp(mask)
library(fslr)
set.seed(1234)
dims = c(30, 30, 10)
arr = array(rnorm(prod(dims)), dim = dims)
nim = nifti(arr)
mask = datatyper(nim > 1)
bwconncomp(mask)
library(fslr)
set.seed(1234)
dims = c(30, 30, 10)
arr = array(rnorm(prod(dims)), dim = dims)
nim = nifti(arr)
mask = datatyper(nim > 1)
cc = bwconncomp(mask)
cc
ortho2(cc)
table(c(cc))
library(spm12r)
install_spm12()
library(spm12r)
install_spm12(ld
library(spm12r)
update.packages(ask = FALSE)
library(spm12r)
